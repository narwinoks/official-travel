{
    "sourceFile": "config/laratrust.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1666275472890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1666275472890,
            "name": "Commit-0",
            "content": "<?php\n\nreturn [\n    /*\n    |--------------------------------------------------------------------------\n    | Use MorphMap in relationships between models\n    |--------------------------------------------------------------------------\n    |\n    | If true, the morphMap feature is going to be used. The array values that\n    | are going to be used are the ones inside the 'user_models' array.\n    |\n    */\n    'use_morph_map' => true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Which permissions and role checker to use.\n    |--------------------------------------------------------------------------\n    |\n    | Defines if you want to use the roles and permissions checker.\n    | Available:\n    | - default: Check for the roles and permissions using the method that Laratrust\n                 has always used.\n    | - query: Check for the roles and permissions using direct queries to the database.\n    |           This method doesn't support cache yet.\n    |\n     */\n    'checker' => 'default',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Cache\n    |--------------------------------------------------------------------------\n    |\n    | Manage Laratrust's cache configurations. It uses the driver defined in the\n    | config/cache.php file.\n    |\n    */\n    'cache' => [\n        /*\n        |--------------------------------------------------------------------------\n        | Use cache in the package\n        |--------------------------------------------------------------------------\n        |\n        | Defines if Laratrust will use Laravel's Cache to cache the roles and permissions.\n        | NOTE: Currently the database check does not use cache.\n        |\n        */\n        'enabled' => env('LARATRUST_ENABLE_CACHE', env('APP_ENV') === 'production'),\n\n        /*\n        |--------------------------------------------------------------------------\n        | Time to store in cache Laratrust's roles and permissions.\n        |--------------------------------------------------------------------------\n        |\n        | Determines the time in SECONDS to store Laratrust's roles and permissions in the cache.\n        |\n        */\n        'expiration_time' => 3600,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Laratrust User Models\n    |--------------------------------------------------------------------------\n    |\n    | This is the array that contains the information of the user models.\n    | This information is used in the add-trait command, for the roles and\n    | permissions relationships with the possible user models, and the\n    | administration panel to attach roles and permissions to the users.\n    |\n    | The key in the array is the name of the relationship inside the roles and permissions.\n    |\n    */\n    'user_models' => [\n        'users' => \\App\\Models\\User::class,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Laratrust Models\n    |--------------------------------------------------------------------------\n    |\n    | These are the models used by Laratrust to define the roles, permissions and teams.\n    | If you want the Laratrust models to be in a different namespace or\n    | to have a different name, you can do it here.\n    |\n    */\n    'models' => [\n\n        'role' => \\App\\Models\\Role::class,\n\n        'permission' => \\App\\Models\\Permission::class,\n\n        /**\n         * Will be used only if the teams functionality is enabled.\n         */\n        'team' => \\App\\Models\\Team::class,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Laratrust Tables\n    |--------------------------------------------------------------------------\n    |\n    | These are the tables used by Laratrust to store all the authorization data.\n    |\n    */\n    'tables' => [\n\n        'roles' => 'roles',\n\n        'permissions' => 'permissions',\n\n        /**\n         * Will be used only if the teams functionality is enabled.\n         */\n        'teams' => 'teams',\n\n        'role_user' => 'role_user',\n\n        'permission_user' => 'permission_user',\n\n        'permission_role' => 'permission_role',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Laratrust Foreign Keys\n    |--------------------------------------------------------------------------\n    |\n    | These are the foreign keys used by laratrust in the intermediate tables.\n    |\n    */\n    'foreign_keys' => [\n        /**\n         * User foreign key on Laratrust's role_user and permission_user tables.\n         */\n        'user' => 'user_id',\n\n        /**\n         * Role foreign key on Laratrust's role_user and permission_role tables.\n         */\n        'role' => 'role_id',\n\n        /**\n         * Role foreign key on Laratrust's permission_user and permission_role tables.\n         */\n        'permission' => 'permission_id',\n\n        /**\n         * Role foreign key on Laratrust's role_user and permission_user tables.\n         */\n        'team' => 'team_id',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Laratrust Middleware\n    |--------------------------------------------------------------------------\n    |\n    | This configuration helps to customize the Laratrust middleware behavior.\n    |\n    */\n    'middleware' => [\n        /**\n         * Define if the laratrust middleware are registered automatically in the service provider\n         */\n        'register' => true,\n\n        /**\n         * Method to be called in the middleware return case.\n         * Available: abort|redirect\n         */\n        'handling' => 'abort',\n\n        /**\n         * Handlers for the unauthorized method in the middlewares.\n         * The name of the handler must be the same as the handling.\n         */\n        'handlers' => [\n            /**\n             * Aborts the execution with a 403 code and allows you to provide the response text\n             */\n            'abort' => [\n                'code' => 403,\n                'message' => 'User does not have any of the necessary access rights.'\n            ],\n\n            /**\n             * Redirects the user to the given url.\n             * If you want to flash a key to the session,\n             * you can do it by setting the key and the content of the message\n             * If the message content is empty it won't be added to the redirection.\n             */\n            'redirect' => [\n                'url' => '/home',\n                'message' => [\n                    'key' => 'error',\n                    'content' => ''\n                ]\n            ]\n        ]\n    ],\n\n    'teams' => [\n        /*\n        |--------------------------------------------------------------------------\n        | Use teams feature in the package\n        |--------------------------------------------------------------------------\n        |\n        | Defines if Laratrust will use the teams feature.\n        | Please check the docs to see what you need to do in case you have the package already configured.\n        |\n        */\n        'enabled' => false,\n\n        /*\n        |--------------------------------------------------------------------------\n        | Strict check for roles/permissions inside teams\n        |--------------------------------------------------------------------------\n        |\n        | Determines if a strict check should be done when checking if a role or permission\n        | is attached inside a team.\n        | If it's false, when checking a role/permission without specifying the team,\n        | it will check only if the user has attached that role/permission ignoring the team.\n        |\n        */\n        'strict_check' => false,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Laratrust Magic 'isAbleTo' Method\n    |--------------------------------------------------------------------------\n    |\n    | Supported cases for the magic is able to method (Refer to the docs).\n    | Available: camel_case|snake_case|kebab_case\n    |\n    */\n    'magic_is_able_to_method_case' => 'kebab_case',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Laratrust Permissions as Gates\n    |--------------------------------------------------------------------------\n    |\n    | Determines if you can check if a user has a permission using the \"can\" method.\n    |\n    */\n    'permissions_as_gates' => false,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Laratrust Panel\n    |--------------------------------------------------------------------------\n    |\n    | Section to manage everything related with the admin panel for the roles and permissions.\n    |\n    */\n    'panel' => [\n        /*\n        |--------------------------------------------------------------------------\n        | Laratrust Panel Register\n        |--------------------------------------------------------------------------\n        |\n        | This manages if routes used for the admin panel should be registered.\n        | Turn this value to false if you don't want to use Laratrust admin panel\n        |\n        */\n        'register' => false,\n\n        /*\n        |--------------------------------------------------------------------------\n        | Laratrust Panel Path\n        |--------------------------------------------------------------------------\n        |\n        | This is the URI path where Laratrust panel for roles and permissions\n        | will be accessible from.\n        |\n        */\n        'path' => 'laratrust',\n\n        /*\n        |--------------------------------------------------------------------------\n        | Laratrust Panel Path\n        |--------------------------------------------------------------------------\n        |\n        | The route where the go back link should point\n        |\n        */\n        'go_back_route' => '/',\n\n        /*\n        |--------------------------------------------------------------------------\n        | Laratrust Panel Route Middleware\n        |--------------------------------------------------------------------------\n        |\n        | These middleware will get attached onto each Laratrust panel route.\n        |\n        */\n        'middleware' => ['web'],\n\n        /*\n        |--------------------------------------------------------------------------\n        | Enable permissions assignment\n        |--------------------------------------------------------------------------\n        |\n        | Enable/Disable the permissions assignment to the users.\n        |\n        */\n        'assign_permissions_to_user' => true,\n\n        /*\n        |--------------------------------------------------------------------------\n        | Enable permissions creation\n        |--------------------------------------------------------------------------\n        |\n        | Enable/Disable the possibility to create permissions from the panel.\n        |\n        */\n        'create_permissions' => true,\n\n        /*\n        |--------------------------------------------------------------------------\n        | Add restriction to roles in the panel\n        |--------------------------------------------------------------------------\n        |\n        | Configure which roles can not be editable, deletable and removable.\n        | To add a role to the restriction, use name of the role here.\n        |\n        */\n        'roles_restrictions' => [\n            // The user won't be able to remove roles already assigned to users.\n            'not_removable' => [],\n\n            // The user won't be able to edit the role and the permissions assigned.\n            'not_editable' => [],\n\n            // The user won't be able to delete the role.\n            'not_deletable' => [],\n        ],\n    ]\n];\n"
        }
    ]
}